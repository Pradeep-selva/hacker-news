{"version":3,"sources":["constants.js","components/Table/index.js","components/Search/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","large_column","width","medium_column","small_column","Table","list","searchTerm","onDismiss","className","filter","item","title","toLowerCase","includes","isSearched","map","key","objectID","style","href","url","author","num_comments","points","onClick","type","Search","onSearch","onSubmit","children","class","onChange","placeholder","App","props","_isMounted","state","result","pageSearch","searchKey","error","needsToSearchTopStories","bind","setSearchTopStories","fetchTopStories","onSearchSubmit","onPageSearch","this","page","axios","then","data","catch","setState","event","preventDefault","results","hits","oldHits","updatedHits","id","updatedList","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1212a379.chunk.js","sourcesContent":["export const DEFAULT_QUERY = 'react';\nexport const DEFAULT_HPP = '100';\n\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\n\nexport const large_column = { width: '55%' };\nexport const medium_column = { width: '20%' };\nexport const small_column = { width: '5%' };","import './index.css';\nimport {\n    large_column,\n    medium_column,\n    small_column\n} from '../../constants';\nimport React from \"react\";\n\nconst isSearched = searchTerm =>\n    item => {\n        if (item.title)\n            return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\n    }\n\nconst Table = ({ list, searchTerm, onDismiss }) =>\n    <div className=\"table\">\n        {list.filter(isSearched(searchTerm)).map((item) => (\n            <div key={item.objectID} className=\"table-row\">\n                <span className=\"row-title\" style={large_column}>\n                    <a href={item.url}>{item.title}</a>\n                </span>\n                <span style={medium_column}>{item.author}  </span>\n                <span style={small_column}>{item.num_comments}</span>\n                <span style={small_column}>{item.points}</span>\n                <span style={small_column}>\n                    <button\n                        className=\"button-inline\"\n                        onClick={() => onDismiss(item.objectID)}\n                        type=\"button\"\n                    >\n                        Dismiss\n          </button>\n                </span>\n            </div>\n        ))}\n    </div>\n\nexport default Table;","import './index.css';\nimport React from \"react\";\n\nconst Search = ({ onSearch, onSubmit, children }) =>\n    <div className=\"Search\">\n        <form onSubmit={onSubmit}>\n            <div class=\"container input-field\">\n                <input type=\"text\" onChange={onSearch} placeholder=\"   Search a title\">\n                </input>\n                <button type=\"submit\" className=\"button-search\">\n                    {children}\n                </button>\n            </div>\n        </form>\n    </div>\n\nexport default Search;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP,\n} from '../../constants';\nimport Table from '../Table/index'\nimport Search from '../Search/index'\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n      pageSearch: '',\n      searchKey: '',\n      error: null\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchTopStories = this.fetchTopStories.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onPageSearch = this.onPageSearch.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n\n  needsToSearchTopStories(searchKey) {\n    return !this.state.result[searchKey]\n  }\n\n  fetchTopStories(searchTerm, page = 0) {\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }))\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm))\n      this.fetchTopStories(searchTerm);\n    event.preventDefault();\n  }\n\n  setSearchTopStories(results) {\n    const { hits, page } = results;\n    const { searchKey, result } = this.state;\n\n    const oldHits = result && result[searchKey] ?\n      result[searchKey].hits :\n      [];\n\n    const updatedHits = [\n      ...oldHits,\n      ...hits\n    ];\n\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedHits,\n          page\n        }\n      }\n    });\n  }\n\n  onDismiss(id) {\n    const { searchKey, result } = this.state;\n    const { hits, page } = result[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedList = hits.filter(isNotId);\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedList,\n          page\n        }\n      }\n    });\n  }\n\n  onSearch(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onPageSearch(event) {\n    this.setState({ pageSearch: event.target.value })\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchTopStories(searchTerm);\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      pageSearch,\n      result,\n      searchKey,\n      error\n    } = this.state;\n\n    const page = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].page\n    ) || 0;\n\n    const list = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].hits\n    ) || [];\n\n    if (error) {\n      return (\n        <div className=\"Page\">\n          <div className=\"interactions\">\n            <p>Something went wrong...</p>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <h1 className=\"fadein\">Hacker News Clone</h1>\n          <h1>{(result && result.page)}</h1>\n          <Search\n            onSearch={this.onSearch}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        <div className=\"table-head\">\n          <span style={{ width: '53%' }}>Article</span>\n          <span style={{ width: '13%' }}>Author</span>\n          <span style={{ width: '15%' }}>Comments</span>\n          <span style={{ width: '15%' }}>Points</span>\n        </div>\n        <div className=\"in-page\">\n          <input\n            type=\"text\" style={{ width: '200px' }}\n            placeholder=\"Search in page\"\n            onChange={this.onPageSearch}\n          >\n          </input>\n        </div>\n\n        {\n          result ?\n            <Table\n              list={list}\n              searchTerm={pageSearch}\n              onDismiss={this.onDismiss}\n            /> :\n            <div className=\"interactions\">\n              <h1>Loading...</h1>\n            </div>\n        }\n        {\n          result &&\n          <div className=\"interactions\">\n            <button onClick={() => this.fetchTopStories(searchKey, page + 1)}>\n              More\n          </button>\n          </div>\n\n        }\n\n      </div >\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}