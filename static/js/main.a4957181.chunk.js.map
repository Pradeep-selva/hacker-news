{"version":3,"sources":["Constants/constants.js","Constants/sorts.js","components/Header/index.js","components/Table/index.js","components/Search/index.js","components/Loading/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","large_column","width","medium_column","semi_med_column","paddingLeft","small_column","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","options","value","label","Header","sortCriteria","className","style","Table","searchTerm","onDismiss","sortKey","filter","item","title","toLowerCase","includes","isSearched","map","key","objectID","href","url","author","num_comments","points","onClick","type","Search","onSearch","onSubmit","children","class","onChange","placeholder","Loading","App","props","_isMounted","state","result","pageSearch","searchKey","error","isLoading","needsToSearchTopStories","bind","setSearchTopStories","fetchTopStories","onSearchSubmit","onPageSearch","onSort","this","setState","page","isMore","axios","then","data","catch","event","preventDefault","results","hits","oldHits","updatedHits","id","updatedList","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a4957181.chunk.js","sourcesContent":["export const DEFAULT_QUERY = 'react';\nexport const DEFAULT_HPP = '100';\n\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\n\nexport const large_column = { width: '53%' };\nexport const medium_column = { width: '13%' };\nexport const semi_med_column = { paddingLeft: '160px' }\nexport const small_column = { width: '5%' };","import { sortBy } from 'lodash';\n\nexport const SORTS = {\n    NONE: list => list,\n    TITLE: list => sortBy(list, 'title'),\n    AUTHOR: list => sortBy(list, 'author'),\n    COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n    POINTS: list => sortBy(list, 'points').reverse()\n}\n\nexport const options = [\n    { value: 'NONE', label: 'None' },\n    { value: 'TITLE', label: 'Title' },\n    { value: 'AUTHOR', label: 'Author' },\n    { value: 'COMMENTS', label: 'Comments' },\n    { value: 'POINTS', label: 'Points' },\n];\n","import React from 'react';\nimport './index.css'\nimport {\n    large_column,\n    medium_column,\n    small_column\n} from '../../Constants/constants'\n\nconst Header = ({ sortCriteria }) =>\n    <div className=\"table-head\">\n        <span style={large_column}\n            className={sortCriteria == 'Title' && 'sortCriteria'}\n        >\n            Title\n          </span>\n        <span\n            style={medium_column}\n            className={sortCriteria == 'Author' && 'sortCriteria'}\n        >\n            Author\n          </span>\n        <span\n            style={medium_column}\n            className={sortCriteria == 'Comments' && 'sortCriteria'}\n        >\n            Comments\n          </span>\n        <span\n            style={medium_column}\n            className={sortCriteria == 'Points' && 'sortCriteria'}\n        >\n            Points\n          </span>\n        <span style={small_column}>\n            Archive\n          </span>\n    </div>\n\nexport default Header;","import './index.css';\nimport {\n    large_column,\n    medium_column,\n    small_column,\n    semi_med_column\n} from '../../Constants/constants';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SORTS } from '../../Constants/sorts'\n\nconst isSearched = searchTerm =>\n    item => {\n        if (item.title)\n            return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\n    }\n\nconst Table = ({ list, searchTerm, onDismiss, sortKey }) =>\n    <div className=\"table\">\n        {SORTS[sortKey](list).filter(isSearched(searchTerm)).map((item) => (\n            <div key={item.objectID} className=\"table-row\">\n                <span className=\"row-title\" style={large_column}>\n                    <a href={item.url}>{item.title}</a>\n                </span>\n                <span style={medium_column}>{item.author}  </span>\n                <span style={small_column}>{item.num_comments}</span>\n                <span style={semi_med_column}>{item.points}</span>\n                <span style={small_column}>\n                    <button\n                        className=\"button-inline\"\n                        onClick={() => onDismiss(item.objectID)}\n                        type=\"button\"\n                    >\n                        Dismiss\n          </button>\n                </span>\n            </div>\n        ))}\n    </div>\n\nTable.propTypes = {\n    list: PropTypes.array.isRequired,\n    searchTerm: PropTypes.string,\n    onDismiss: PropTypes.func.isRequired\n};\n\nexport default Table;","import './index.css';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Search = ({ onSearch, onSubmit, children }) =>\n    <div className=\"Search\">\n        <form onSubmit={onSubmit}>\n            <div class=\"container input-field\">\n                <input type=\"text\" onChange={onSearch} placeholder=\"   Search a title\">\n                </input>\n                <button type=\"submit\" className=\"button-search\">\n                    {children}\n                </button>\n            </div>\n        </form>\n    </div>\n\nSearch.propTypes = {\n    onSearch: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    children: PropTypes.string\n}\n\nexport default Search;","import React from \"react\";\nimport './index.css';\n\nconst Loading = () =>\n    <div>\n        <div className=\"spinner\">\n            <div className=\"rect1\"></div>\n            <div className=\"rect2\"></div>\n            <div className=\"rect3\"></div>\n            <div className=\"rect4\"></div>\n            <div className=\"rect5\"></div>\n        </div>\n        <div className=\"interactions\">\n            <h5>Loading...</h5>\n        </div>\n    </div>\n\nexport default Loading;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css'\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP\n} from '../../Constants/constants';\nimport { options } from '../../Constants/sorts';\nimport Header from '../Header/index';\nimport Table from '../Table/index';\nimport Search from '../Search/index';\nimport Loading from '../Loading/index';\n\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n      pageSearch: '',\n      searchKey: '',\n      error: null,\n      isLoading: false,\n      sortKey: 'NONE',\n      sortCriteria: '',\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchTopStories = this.fetchTopStories.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onPageSearch = this.onPageSearch.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    this.setState({\n      sortKey: sortKey.value,\n      sortCriteria: sortKey.label\n    });\n  }\n\n  needsToSearchTopStories(searchKey) {\n    return !this.state.result[searchKey]\n  }\n\n  fetchTopStories(searchTerm, page = 0, isMore = false) {\n    this.setState({ isLoading: true });\n\n    if (!isMore) {\n      this.setState({\n        sortKey: 'NONE',\n        sortCriteria: ''\n      })\n    }\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }))\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm))\n      this.fetchTopStories(searchTerm);\n    event.preventDefault();\n  }\n\n  setSearchTopStories(results) {\n    const { hits, page } = results;\n    const { searchKey, result } = this.state;\n\n    const oldHits = result && result[searchKey] ?\n      result[searchKey].hits :\n      [];\n\n    const updatedHits = [\n      ...oldHits,\n      ...hits\n    ];\n\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedHits,\n          page\n        }\n      },\n      isLoading: false,\n    });\n  }\n\n  onDismiss(id) {\n    const { searchKey, result } = this.state;\n    const { hits, page } = result[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedList = hits.filter(isNotId);\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedList,\n          page\n        }\n      }\n    });\n  }\n\n  onSearch(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onPageSearch(event) {\n    this.setState({ pageSearch: event.target.value })\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchTopStories(searchTerm);\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      pageSearch,\n      result,\n      searchKey,\n      error,\n      isLoading,\n      sortKey,\n      sortCriteria\n    } = this.state;\n\n    const page = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].page\n    ) || 0;\n\n    const list = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].hits\n    ) || [];\n\n    if (error) {\n      return (\n        <div className=\"Page\">\n          <div className=\"interactions\">\n            <p>Something went wrong...</p>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <h1 className=\"fadein\">Hacker News Clone</h1>\n          <h1>{(result && result.page)}</h1>\n          <Search\n            onSearch={this.onSearch}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        <Header\n          sortCriteria={sortCriteria}\n        />\n        <div className=\"in-page\">\n          <input\n            type=\"text\" style={{ width: '200px' }}\n            placeholder=\"Search in page\"\n            onChange={this.onPageSearch}\n          >\n          </input>\n          <div className=\"dropdown\">\n            <Dropdown\n              options={options}\n              onChange={this.onSort}\n              value={sortKey}\n              placeholder='Sort'\n            />\n          </div>\n\n        </div>\n        {\n          result &&\n          <Table\n            list={list}\n            searchTerm={pageSearch}\n            onDismiss={this.onDismiss}\n            sortKey={sortKey}\n          />\n        }\n        {\n          !isLoading ?\n            <div className=\"interactions\">\n              <button onClick={() => this.fetchTopStories(searchKey, page + 1, true)}>\n                More\n          </button>\n            </div> :\n            <Loading />\n\n        }\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}