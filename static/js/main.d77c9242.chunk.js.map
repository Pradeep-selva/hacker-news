{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","large_column","width","medium_column","small_column","App","props","state","result","searchTerm","pageSearch","searchKey","needsToSearchTopStories","bind","setSearchTopStories","fetchTopStories","onSearchSubmit","onPageSearch","onDismiss","onSearch","this","page","fetch","then","response","json","catch","error","event","setState","preventDefault","results","hits","oldHits","updatedHits","id","updatedList","filter","item","objectID","target","value","list","className","onSubmit","style","type","placeholder","onChange","onClick","Component","Search","children","class","Table","title","toLowerCase","includes","isSearched","map","key","href","url","author","num_comments","points","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d77c9242.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst DEFAULT_QUERY = 'react';\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst large_column = { width: '55%' };\nconst medium_column = { width: '20%' };\nconst small_column = { width: '5%' };\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n      pageSearch: '',\n      searchKey: ''\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchTopStories = this.fetchTopStories.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onPageSearch = this.onPageSearch.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n\n  needsToSearchTopStories(searchKey) {\n    return !this.state.result[searchKey]\n  }\n\n  fetchTopStories(searchTerm, page = 0) {\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(error => error)\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm))\n      this.fetchTopStories(searchTerm);\n    event.preventDefault();\n  }\n\n  setSearchTopStories(results) {\n    const { hits, page } = results;\n    const { searchKey, result } = this.state;\n\n    const oldHits = result && result[searchKey] ?\n      result[searchKey].hits :\n      [];\n\n    const updatedHits = [\n      ...oldHits,\n      ...hits\n    ];\n\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedHits,\n          page\n        }\n      }\n    });\n  }\n\n  onDismiss(id) {\n    const { searchKey, result } = this.state;\n    const { hits, page } = result[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedList = hits.filter(isNotId);\n    this.setState({\n      result: {\n        ...result,\n        [searchKey]: {\n          hits: updatedList,\n          page\n        }\n      }\n    });\n  }\n\n  onSearch(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onPageSearch(event) {\n    this.setState({ pageSearch: event.target.value })\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchTopStories(searchTerm);\n  }\n\n  render() {\n    const { pageSearch, result, searchKey } = this.state;\n\n    const page = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].page\n    ) || 0;\n\n    const list = (\n      result &&\n      result[searchKey] &&\n      result[searchKey].hits\n    ) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <h1 className=\"fadein\">Hacker News Clone</h1>\n          <h1>{(result && result.page)}</h1>\n          <Search\n            onSearch={this.onSearch}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        <div className=\"table-head\">\n          <span style={{ width: '53%' }}>Article</span>\n          <span style={{ width: '13%' }}>Author</span>\n          <span style={{ width: '15%' }}>Comments</span>\n          <span style={{ width: '15%' }}>Points</span>\n        </div>\n        <div className=\"in-page\">\n          <input\n            type=\"text\" style={{ width: '200px' }}\n            placeholder=\"Search in page\"\n            onChange={this.onPageSearch}\n          >\n          </input>\n        </div>\n        {\n          result ?\n            <Table\n              list={list}\n              searchTerm={pageSearch}\n              onDismiss={this.onDismiss}\n            /> :\n            <h1>Loading...</h1>\n        }\n        {\n          result &&\n          <div className=\"interactions\">\n            <button onClick={() => this.fetchTopStories(searchKey, page + 1)}>\n              More\n          </button>\n          </div>\n\n        }\n\n      </div >\n    );\n  }\n}\n\nconst isSearched = searchTerm =>\n  item => {\n    if (item.title)\n      return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\n  }\n\nconst Search = ({ onSearch, onSubmit, children }) =>\n  <div className=\"Search\">\n    <form onSubmit={onSubmit}>\n      <div class=\"container input-field\">\n        <input type=\"text\" onChange={onSearch} placeholder=\"   Search a title\">\n        </input>\n        <button type=\"submit\" className=\"button-search\">\n          {children}\n        </button>\n      </div>\n    </form>\n  </div>\n\n\nconst Table = ({ list, searchTerm, onDismiss }) =>\n  <div className=\"table\">\n    {list.filter(isSearched(searchTerm)).map((item) => (\n      <div key={item.objectID} className=\"table-row\">\n        <span className=\"row-title\" style={large_column}>\n          <a href={item.url}>{item.title}</a>\n        </span>\n        <span style={medium_column}>{item.author}  </span>\n        <span style={small_column}>{item.num_comments}</span>\n        <span style={small_column}>{item.points}</span>\n        <span style={small_column}>\n          <button\n            className=\"button-inline\"\n            onClick={() => onDismiss(item.objectID)}\n            type=\"button\"\n          >\n            Dismiss\n          </button>\n        </span>\n      </div>\n    ))}\n  </div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}